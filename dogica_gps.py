# Code generated by font_to_py.py.
# Font: dogica.ttf Char set:  "'.0123456789ENSWÂ°
# Cmd: font_to_py.py TTF/dogica.ttf 11 -f dogica_gps.py -k extended_gps
version = '0.42'

def height():
    return 11

def baseline():
    return 11

def max_width():
    return 12

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 176

_font =\
b'\x0c\x00\x1f\x00\x1f\x00\x61\x80\x61\x80\x01\x80\x0f\x00\x1f\x00'\
b'\x18\x00\x00\x00\x0c\x00\x0c\x00\x0c\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0c\x00\x00\x00\x00\x00\x0d\x80\x0d\x80\x0d\x80\x1b\x00\x1b\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x03\x00'\
b'\x03\x00\x03\x00\x0c\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0c\x00\x0c\x00\x0c\x00\x1f\x00\x1f\x00\x61\x80'\
b'\x6d\x80\x6d\x80\x6d\x80\x6d\x80\x6d\x80\x61\x80\x7f\x80\x1f\x00'\
b'\x0c\x00\x0c\x00\x0c\x00\x7c\x00\x7c\x00\x0c\x00\x0c\x00\x0c\x00'\
b'\x0c\x00\x0c\x00\x7f\x80\x7f\x80\x0c\x00\x1f\x00\x1f\x00\x61\x80'\
b'\x61\x80\x01\x80\x03\x00\x0f\x00\x0c\x00\x18\x00\x7f\x80\x7f\x80'\
b'\x0c\x00\x7f\x00\x7f\x00\x01\x80\x01\x80\x01\x80\x1f\x00\x1f\x80'\
b'\x01\x80\x01\x80\x7f\x80\x7f\x00\x0c\x00\x03\x00\x03\x00\x0f\x00'\
b'\x1f\x00\x1b\x00\x63\x00\x7f\x80\x7f\x80\x03\x00\x03\x00\x03\x00'\
b'\x0c\x00\x7f\x80\x7f\x80\x60\x00\x7f\x00\x7f\x00\x01\x80\x01\x80'\
b'\x01\x80\x61\x80\x7f\x80\x1f\x00\x0c\x00\x1f\x00\x1f\x00\x61\x80'\
b'\x61\x80\x60\x00\x7f\x00\x7f\x80\x61\x80\x61\x80\x7f\x80\x1f\x00'\
b'\x0c\x00\x7f\x80\x7f\x80\x61\x80\x61\x80\x01\x80\x03\x00\x0f\x00'\
b'\x0c\x00\x18\x00\x18\x00\x18\x00\x0c\x00\x1f\x00\x1f\x00\x61\x80'\
b'\x61\x80\x61\x80\x1f\x00\x7f\x80\x61\x80\x61\x80\x7f\x80\x1f\x00'\
b'\x0c\x00\x1f\x00\x1f\x00\x61\x80\x61\x80\x61\x80\x1f\x80\x1f\x80'\
b'\x01\x80\x03\x00\x1f\x00\x1c\x00\x0c\x00\x1f\x00\x1f\x00\x61\x80'\
b'\x61\x80\x01\x80\x0f\x00\x1f\x00\x18\x00\x00\x00\x0c\x00\x0c\x00'\
b'\x0c\x00\x7f\x80\x7f\x80\x60\x00\x60\x00\x60\x00\x7f\x00\x7f\x00'\
b'\x60\x00\x60\x00\x7f\x80\x7f\x80\x0c\x00\x61\x80\x61\x80\x79\x80'\
b'\x7d\x80\x6d\x80\x63\x80\x63\x80\x61\x80\x61\x80\x61\x80\x61\x80'\
b'\x0c\x00\x1f\x00\x1f\x00\x61\x80\x61\x80\x60\x00\x1f\x00\x1f\x80'\
b'\x01\x80\x61\x80\x7f\x80\x1f\x00\x0c\x00\xc0\x60\xc0\x60\xc0\x60'\
b'\xcc\x60\xcc\x60\xcc\x60\xcc\x60\xcc\x60\xdb\x60\xfb\xe0\x61\x80'\
b'\x0c\x00\x00\x00\x00\x00\x0c\x00\x1f\x00\x1b\x00\x1b\x00\x1f\x00'\
b'\x0c\x00\x00\x00\x00\x00\x00\x00'

_sparse =\
b'\x20\x00\x03\x00\x22\x00\x06\x00\x27\x00\x09\x00\x2e\x00\x0c\x00'\
b'\x30\x00\x0f\x00\x31\x00\x12\x00\x32\x00\x15\x00\x33\x00\x18\x00'\
b'\x34\x00\x1b\x00\x35\x00\x1e\x00\x36\x00\x21\x00\x37\x00\x24\x00'\
b'\x38\x00\x27\x00\x39\x00\x2a\x00\x3f\x00\x2d\x00\x45\x00\x30\x00'\
b'\x4e\x00\x33\x00\x53\x00\x36\x00\x57\x00\x39\x00\xb0\x00\x3c\x00'\

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch)) << 3
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 11
    return _mvfont[doff + 2:next_offs], 11, width

